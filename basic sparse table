struct SparseTable
{
    int n, LOG;
    vector<vector<int>> st;
    vector<int> lg;

    SparseTable(const vector<int> &a)
    {
        n = a.size();
        lg.assign(n + 1, 0);
        for (int i = 2; i <= n; i++)
        {
            lg[i] = lg[i / 2] + 1;
        }
        LOG = lg[n] + 1;
        st.assign(LOG, vector<int>(n));

        for (int i = 0; i < n; i++)
        {
            st[0][i] = a[i];
        }

        for (int k = 1; k < LOG; k++)
        {
            for (int i = 0; i + (1 << k) <= n; i++)
            {
                st[k][i] = max(st[k - 1][i], st[k - 1][i + (1 << (k - 1))]);
            }
        }
    }
    int rangemax(int l, int r)
    {
        int len = r - l + 1;
        int k = lg[len];

        return max(st[k][l], st[k][r - (1 << k) + 1]);
    }
};
