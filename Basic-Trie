/*
    AUTHOR -> aaryamanbhattacharya04 (CODEFORCES)
*/
#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
using namespace std;
// using namespace __gnu_pbds;
#define int long long
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
// typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
const int mod = 1e9 + 7;
const int inf = 1e18;
const int K = 26;
/*
 __builtin_popcountll(x): Counts the number of oneâ€™s(set bits) in an integer(long/long long).
 __builtin_parityll(x): Checks the Parity of a number.Returns true(1) if the number has odd parity(odd number of set bits) else it returns false(0) for even parity(even number of set bits).
 __builtin_clzll(x): Counts the leading number of zeros of the integer(long/long long).
 __builtin_ctzll(x): Counts the trailing number of zeros of the integer(long/long long).
cout << fixed << setprecision(x) << ans << "\n"; : Use this in case ans is required upto x deciaml precision
*/
class TrieNode
{
public:
    TrieNode *children[K];
    bool isEnd;

    TrieNode()
    {
        isEnd = 0;
        for (int i = 0; i < K; i++)
        {
            children[i] = nullptr;
        }
    }
};

class Trie
{
private:
    TrieNode *root;

public:
    Trie()
    {
        root = new TrieNode();
    }

    void insert(string &word)
    {
        TrieNode *current = root;
        for (char ch : word)
        {
            int index = ch - 'a';
            if (current->children[index] == nullptr)
            {
                current->children[index] = new TrieNode();
            }
            current = current->children[index];
        }
        current->isEnd = 1;
    }

    bool search(string &word)
    {
        TrieNode *current = root;
        for (char ch : word)
        {
            int index = ch - 'a';
            if (current->children[index] == nullptr)
            {
                return 0;
            }
            current = current->children[index];
        }
        return current->isEnd;
    }

    bool startswith(string &prefix)
    {
        TrieNode *current = root;
        for (char ch : prefix)
        {
            int index = ch - 'a';
            if (current->children[index] == nullptr)
            {
                return 0;
            }
            current = current->children[index];
        }
        return 1;
    }

    vector<int> find_word_ends(string &s, int idx)
    {
        vector<int> ends;
        TrieNode *curr = root;

        for (int i = idx; i < s.size(); i++)
        {
            int index = s[i] - 'a';
            if (curr->children[index] == nullptr)
            {
                break;
            }
            curr = curr->children[index];
            if (curr->isEnd)
            {
                ends.push_back(i + 1);
            }
        }
        return ends;
    }
};

void solve()
{
}
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int _ = 1;
    // cin >> _;
    for (int __ = 1; __ <= _; __++)
    {
        solve();
    }
}
