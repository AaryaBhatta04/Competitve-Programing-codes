#include <bits/stdc++.h>
#include <thread>
#include <chrono>
using namespace std;
// using namespace __gnu_pbds;
#define int long long
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
// typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
const int mod = 1e9 + 7;
const int inf = 1e18;
const int K = 26;
// ctrl+shift+b to run
// cout << fixed << setprecision(x) << ans << "\n"; : Use this in case ans is required upto x decimal precision
int n;
vector<string> a;
class TrieNode
{
public:
    TrieNode *children[K];
    bool isEnd;
    int subtreecnt;

    TrieNode()
    {
        isEnd = 0;
        subtreecnt = 0;
        for (int i = 0; i < K; i++)
        {
            children[i] = nullptr;
        }
    }
};

class Trie
{
public:
    TrieNode *root;

    Trie()
    {
        root = new TrieNode();
    }

    void insert(string &word)
    {
        TrieNode *current = root;
        current->subtreecnt++;
        for (char ch : word)
        {
            int index = ch - 'a';
            if (current->children[index] == nullptr)
            {
                current->children[index] = new TrieNode();
            }
            current = current->children[index];
            current->subtreecnt++;
        }
        current->isEnd = 1;
    }

    int dothing(string &x)
    {
        TrieNode *curr = root;
        for (char ch : x)
        {
            int idx = ch - 'a';
            if (curr->children[idx] == nullptr)
            {
                return 0;
            }
            curr = curr->children[idx];
        }

        int tot = curr->subtreecnt;

        // int chk = 0LL;

        // for (int i = 0; i < K; i++)
        // {
        //     if (curr->children[i])
        //     {
        //         chk += curr->children[i]->subtreecnt;
        //     }
        // }

        return tot;
    }

    bool search(string &word)
    {
        TrieNode *current = root;
        for (char ch : word)
        {
            int index = ch - 'a';
            if (current->children[index] == nullptr)
            {
                return 0;
            }
            current = current->children[index];
        }
        return current->isEnd;
    }

    bool startswith(string &prefix)
    {
        TrieNode *current = root;
        for (char ch : prefix)
        {
            int index = ch - 'a';
            if (current->children[index] == nullptr)
            {
                return 0;
            }
            current = current->children[index];
        }
        return 1;
    }

    vector<int> find_word_ends(string &s, int idx)
    {
        vector<int> ends;
        TrieNode *curr = root;

        for (int i = idx; i < s.size(); i++)
        {
            int index = s[i] - 'a';
            if (curr->children[index] == nullptr)
            {
                break;
            }
            curr = curr->children[index];
            if (curr->isEnd)
            {
                ends.push_back(i + 1);
            }
        }
        return ends;
    }
};

int ans = 0LL;

void dfs(TrieNode *cur, int dep)
{
    if (dep > 0 && cur->subtreecnt)
    {
        ans += ((cur->subtreecnt * (cur->subtreecnt - 1)) / 2);
    }

    for (int i = 0; i < K; i++)
    {
        if (cur->children[i])
        {
            dfs(cur->children[i], dep + 1);
        }
    }
}

void solve()
{
    cin >> n;
    a.assign(n, string());

    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }

    Trie x;

    for (auto it : a)
    {
        x.insert(it);
    }

    // int cnt = 0LL;

    // for (auto it : a)
    // {
    //     int len = it.length();

    //     string y;
    //     y.clear();

    //     for (int i = 0; i < len; i++)
    //     {
    //         y.push_back(it[i]);
    //         cnt += (x.dothing(y) - 1);
    //         // cout << y << "\n";
    //         // cout << x.dothing(y) - 1 << "\n";
    //     }
    // }

    // cout << (cnt / 2) << "\n";
    // return;

    dfs(x.root, 0LL);
    cout << ans << "\n";
    return;
}

signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int _ = 1;
    // cin >> _;
    for (int __ = 1; __ <= _; __++)
    {
        solve();
    }
}
