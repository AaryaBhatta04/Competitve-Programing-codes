// lazy segment tree

struct node
{
    int lazy;
    int sum;
    node()
    {
        lazy = 0;
        sum = 0;
    }
};

node merge(node a, node b)
{
    node ans;
    ans.sum = a.sum + b.sum;
    return ans;
}

vector<node> t;
vector<int> a;

void push(int id, int l, int r)
{
    if (t[id].lazy != 0)
    {
        t[id].sum += (r - l + 1) * t[id].lazy;
        if (l != r)
        {
            t[2 * id].lazy += t[id].lazy;
            t[2 * id + 1].lazy += t[id].lazy;
        }
        t[id].lazy = 0;
    }
}

void build(int id, int l, int r)
{
    if (l == r)
    {
        t[id].sum = a[l];
        t[id].lazy = 0;
        return;
    }

    int mid = (l + r) >> 1;
    build(2 * id, l, mid);
    build(2 * id + 1, mid + 1, r);
    t[id] = merge(t[2 * id], t[2 * id + 1]);
}

void update(int id, int l, int r, int lo, int hi, int val)
{
    push(id, l, r);
    if (lo > r || l > hi)
    {
        return;
    }
    if (lo <= l && hi >= r)
    {
        t[id].lazy += val;
        push(id, l, r);
        return;
    }

    int mid = (l + r) >> 1;
    update(2 * id, l, mid, lo, hi, val);
    update(2 * id + 1, mid + 1, r, lo, hi, val);
    t[id] = merge(t[2 * id], t[2 * id + 1]);
}

node query(int id, int l, int r, int lo, int hi)
{
    push(id, l, r);
    if (lo > r || l > hi)
    {
        return node();
    }

    if (lo <= l && hi >= r)
    {
        return t[id];
    }

    int mid = (l + r) >> 1;
    return merge(query(2 * id, l, mid, lo, hi), query(2 * id + 1, mid + 1, r, lo, hi));
}
