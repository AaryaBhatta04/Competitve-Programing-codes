#include <bits/stdc++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
using namespace std;
// using namespace __gnu_pbds;
#define int long long
// typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
// typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
const int mod = 1e9 + 7;
const int inf = 1e18;
const int K = 26;
// ctrl+shift+b to run
// cout << fixed << setprecision(x) << ans << "\n"; : Use this in case ans is required upto x decimal precision
int n, q;
vector<vector<vector<int>>> a;
void solve()
{
    cin >> n;
    a.assign(n, vector<vector<int>>(n, vector<int>(n, 0LL)));

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            for (int k = 0; k < n; k++)
            {
                cin >> a[i][j][k];
            }
        }
    }

    // 3D prefix sum

    vector<vector<vector<int>>> pre(n + 1, vector<vector<int>>(n + 1, vector<int>(n + 1, 0LL)));

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            for (int k = 1; k <= n; k++)
            {
                pre[i][j][k] = pre[i - 1][j][k] + pre[i][j - 1][k] + pre[i][j][k - 1] - pre[i - 1][j - 1][k] - pre[i - 1][j][k - 1] - pre[i][j - 1][k - 1] + pre[i - 1][j - 1][k - 1] + a[i - 1][j - 1][k - 1];
                //
            }
        }
    }

    cin >> q;

    while (q--)
    {
        int lx, rx, ly, ry, lz, rz;
        cin >> lx >> rx >> ly >> ry >> lz >> rz;

        int ans = pre[rx][ry][rz];
        ans -= pre[lx - 1][ry][rz];
        ans -= pre[rx][ly - 1][rz];
        ans -= pre[rx][ry][lz - 1];
        ans += pre[lx - 1][ly - 1][rz];
        ans += pre[lx - 1][ry][lz - 1];
        ans += pre[rx][ly - 1][lz - 1];
        ans -= pre[lx - 1][ly - 1][lz - 1];

        cout << ans << "\n";
    }
    return;
}
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int _ = 1;
    // cin >> _;
    for (int __ = 1; __ <= _; __++)
    {
        solve();
    }
}
