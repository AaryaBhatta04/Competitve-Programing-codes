/*
    AUTHOR -> KIMJONGOOF (CODEFORCES)
*/
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
#define int long long
typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;
const int mod = 1e9 + 7;
const int inf = 1e16;
/*
 __builtin_popcountll(x): Counts the number of oneâ€™s(set bits) in an integer(long/long long).
 __builtin_parityll(x): Checks the Parity of a number.Returns true(1) if the number has odd parity(odd number of set bits) else it returns false(0) for even parity(even number of set bits).
 __builtin_clzll(x): Counts the leading number of zeros of the integer(long/long long).
 __builtin_ctzll(x): Counts the trailing number of zeros of the integer(long/long long).
cout << fixed << setprecision(10) << ans << "\n"; : Use this in case ans is required upto 10 deciaml precision
*/
int n, m;
vector<vector<int>> adj, cap;
vector<int> pars;
int bfs(int s, int t)
{
    pars.assign(n, -1);
    pars[s] = -2;
    queue<pair<int, int>> q;

    q.push({s, inf});

    while (!q.empty())
    {
        int src = q.front().first;
        int flo = q.front().second;
        q.pop();

        for (auto it : adj[src])
        {
            if (pars[it] == -1 && cap[src][it])
            {
                pars[it] = src;
                int new_flo = min(flo, cap[src][it]);
                if (it == t)
                {
                    return new_flo;
                }
                q.push({it, new_flo});
            }
        }
    }
    return 0;
}

int mxflo(int s, int t)
{
    int flo = 0;
    // vector<int> pars;
    int new_flo;

    while (new_flo = bfs(s, t))
    {
        flo += new_flo;
        int cur = t;
        while (cur != s)
        {
            int prev = pars[cur];
            cap[prev][cur] -= new_flo;
            cap[cur][prev] += new_flo;
            cur = prev;
        }
    }

    return flo;
}
void solve()
{
    cin >> n >> m;
    adj.assign(n, vector<int>());
    cap.assign(n, vector<int>(n, 0));

    for (int i = 0; i < m; i++)
    {
        int a, b, c;
        cin >> a >> b >> c;
        a--;
        b--;

        if (cap[a][b] == 0 && cap[b][a] == 0)
        {
            adj[a].push_back(b);
            adj[b].push_back(a);
        }

        cap[a][b] += c;
    }

    cout << mxflo(0, n - 1) << "\n";
}
signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int _ = 1;
    // cin >> _;
    for (int __ = 1; __ <= _; __++)
    {
        solve();
    }
}
