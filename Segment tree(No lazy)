struct Node
{
    int sum;
    Node()
    {
        sum = inf;
    }
};

class SegmentTree
{
public:
    vector<Node> t;
    int n;

    Node merge(Node a, Node b)
    {
        Node ans;
        ans.sum = min(a.sum, b.sum);
        return ans;
    }

    void build(int id, int l, int r, const vector<int> &arr)
    {
        if (l == r)
        {
            t[id].sum = arr[l];
            return;
        }
        int mid = (l + r) >> 1;
        build(2 * id, l, mid, arr);
        build(2 * id + 1, mid + 1, r, arr);
        t[id] = merge(t[2 * id], t[2 * id + 1]);
    }

    void update(int id, int l, int r, int pos, int val)
    {
        if (pos < l || pos > r)
        {
            return;
        }
        if (l == r)
        {
            t[id].sum = val;
            return;
        }
        int mid = (l + r) >> 1;
        update(2 * id, l, mid, pos, val);
        update(2 * id + 1, mid + 1, r, pos, val);
        t[id] = merge(t[2 * id], t[2 * id + 1]);
    }

    Node query(int id, int l, int r, int lo, int hi)
    {
        if (lo > r || l > hi)
        {
            return Node();
        }
        if (lo <= l && hi >= r)
        {
            return t[id];
        }
        int mid = (l + r) >> 1;
        return merge(query(2 * id, l, mid, lo, hi), query(2 * id + 1, mid + 1, r, lo, hi));
    }
};
